name: Go CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v ./...

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  deploy:
    needs: [build, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        key_format: openssh
        port: 22
        script: |
          # 创建应用目录（如果不存在）
          mkdir -p /www/wwwroot/repo-prompt-web/app
          mkdir -p /www/wwwroot/repo-prompt-web/config
          mkdir -p /www/wwwroot/repo-prompt-web/logs
          
          # 清理之前的构建文件（如果有）
          rm -rf /www/wwwroot/repo-prompt-web/app/build
          mkdir -p /www/wwwroot/repo-prompt-web/app/build
          
          # 在服务器上创建临时目录
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # 克隆代码仓库
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          
          # 复制配置文件示例（如果配置文件不存在）
          if [ ! -f /www/wwwroot/repo-prompt-web/config/config.yml ]; then
            cp config.yml /www/wwwroot/repo-prompt-web/config/config.yml
            echo "初始化配置文件"
          fi
          
          # 配置Docker镜像加速器
          echo "配置Docker镜像加速..."
          if [ ! -f /etc/docker/daemon.json ]; then
            mkdir -p /etc/docker
            echo '{
              "registry-mirrors": [
                "https://registry.cn-hangzhou.aliyuncs.com",
                "https://mirror.ccs.tencentyun.com",
                "https://hub-mirror.c.163.com"
              ]
            }' | sudo tee /etc/docker/daemon.json
            sudo systemctl daemon-reload
            sudo systemctl restart docker
            echo "Docker镜像加速器配置完成"
          fi
          
          # 在服务器上构建Docker镜像，增加重试机制
          echo "开始构建Docker镜像..."
          MAX_ATTEMPTS=3
          ATTEMPT=1
          BUILD_SUCCESS=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$BUILD_SUCCESS" != "true" ]; do
            echo "构建尝试 $ATTEMPT/$MAX_ATTEMPTS"
            if docker build -t repo-prompt-web:latest .; then
              BUILD_SUCCESS=true
              echo "Docker镜像构建成功!"
            else
              ATTEMPT=$((ATTEMPT+1))
              if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
                echo "构建失败，30秒后重试..."
                sleep 30
              else
                echo "构建失败，已达到最大重试次数"
              fi
            fi
          done
          
          if [ "$BUILD_SUCCESS" != "true" ]; then
            echo "Docker镜像构建失败，退出部署"
            exit 1
          fi
          
          # 停止并删除旧容器（如果存在）
          docker stop repo-prompt-web || true
          docker rm repo-prompt-web || true
          
          # 启动新容器
          docker run -d --name repo-prompt-web \
            --restart=always \
            -p 8080:8080 \
            -e DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            -e GITHUB_API_KEY=${{ secrets.GH_API_KEY }} \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e GEMINI_PROXY=${{ secrets.GEMINI_PROXY }} \
            -v /www/wwwroot/repo-prompt-web/config:/app/config \
            -v /www/wwwroot/repo-prompt-web/logs:/app/logs \
            repo-prompt-web:latest
          
          # 清理临时目录
          rm -rf $TEMP_DIR
          
          # 验证部署是否成功，增加等待时间和重试
          echo "等待服务启动..."
          sleep 30  # 增加等待时间
          
          MAX_CHECKS=5
          CHECK=1
          SUCCESS=false
          
          while [ $CHECK -le $MAX_CHECKS ] && [ "$SUCCESS" != "true" ]; do
            echo "健康检查 $CHECK/$MAX_CHECKS"
            if curl -s http://localhost:8080/health > /dev/null; then
              SUCCESS=true
              echo "✅ 服务已成功部署并正在运行"
            else
              CHECK=$((CHECK+1))
              if [ $CHECK -le $MAX_CHECKS ]; then
                echo "服务未响应，20秒后重试..."
                sleep 20
              else
                echo "健康检查失败，已达到最大重试次数"
              fi
            fi
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo "⚠️ 服务可能未正常启动，请检查Docker日志"
            docker logs repo-prompt-web
          fi 