name: Go CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v ./...

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  deploy:
    needs: [build, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          # 创建应用目录（如果不存在）
          mkdir -p /www/wwwroot/repo-prompt-web/app
          
          # 清理之前的构建文件（如果有）
          rm -rf /www/wwwroot/repo-prompt-web/app/build
          mkdir -p /www/wwwroot/repo-prompt-web/app/build
          
          # 在服务器上创建临时目录
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # 克隆代码仓库
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          
          # 在服务器上构建Docker镜像
          docker build -t repo-prompt-web:latest .
          
          # 停止并删除旧容器（如果存在）
          docker stop repo-prompt-web || true
          docker rm repo-prompt-web || true
          
          # 启动新容器
          docker run -d --name repo-prompt-web \
            -p 8080:8080 \
            -e DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            -e GITHUB_API_KEY=${{ secrets.GH_API_KEY }} \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e GEMINI_PROXY=${{ secrets.GEMINI_PROXY }} \
            -v /www/wwwroot/repo-prompt-web/config:/app/config \
            repo-prompt-web:latest
          
          # 清理临时目录
          rm -rf $TEMP_DIR 